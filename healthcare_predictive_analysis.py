# -*- coding: utf-8 -*-
"""Healthcare Predictive Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HZS366rmyjxqVDkIR3MwpkbbwpAwLTX6

# Healthcare Predictive Analytics: Heart Disease Prediction
This notebook demonstrates how to build a healthcare predictive analytics model to predict heart disease using the Heart Disease dataset from the UCI Machine Learning Repository. The steps include data loading, preprocessing, model building, and evaluation.
"""

!pip install pandas scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, roc_auc_score
import joblib

"""## Step 1: Load the Dataset
We will load the Heart Disease dataset from the UCI Machine Learning Repository and display basic information about the dataset.
"""

data_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
columns = ["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "target"]

# Load the dataset
data = pd.read_csv(data_url, header=None, names=columns, na_values="?")

# Display basic information about the dataset
print(data.info())
print(data.describe())

"""## Step 2: Data Cleaning and Preprocessing
We will handle missing values, ensure the target variable is binary, and standardize the features.
"""

# Ensure the target variable is binary
data['target'] = data['target'].apply(lambda x: 1 if x > 0 else 0)

# Handle missing values
data = data.dropna()

# Separate features and target variable
X = data.drop('target', axis=1)
y = data['target']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""## Step 3: Model Building
We will build a Logistic Regression model to predict the presence of heart disease.
"""

# Build and train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

"""## Step 4: Model Evaluation
We will evaluate the model using classification report and AUC-ROC score.
"""

# Make predictions
y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1]

# Evaluate the model
print(classification_report(y_test, y_pred))
print('AUC-ROC:', roc_auc_score(y_test, y_pred_proba))

"""## Step 5: Save the Model
We will save the trained model using joblib.
"""

# Save the model
joblib.dump(model, 'heart_disease_model.joblib')
from google.colab import files
files.download('heart_disease_model.joblib')
